**1**
class Solution {
    public int[] twoSum(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[]{};
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int dif = target - nums[i];
            if (map.containsKey(dif)) {
                return new int[]{map.get(dif),i};
            }
            map.put(nums[i],i);
        }
        return new int[]{};
        
    }
}


**2**
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int sum = 0;
        ListNode newHead = new ListNode(0), p1 = l1, p2 = l2, cur = newHead;
        while (p1!=null || p2!=null) {
            if (p1 != null) {
                sum += p1.val;
                p1 = p1.next;
            }
            if (p2 != null) {
                sum += p2.val;
                p2 = p2.next;
            }
            cur.next = new ListNode(sum%10);
            sum = sum/10;
            cur = cur.next;
            if (sum == 1) {
                cur.next = new ListNode(1);
            }
            
        }
        return newHead.next;
     }
}


**7**


